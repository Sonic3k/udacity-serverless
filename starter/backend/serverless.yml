service: serverless-todo-app

plugins:
 - serverless-iam-roles-per-function
 - serverless-reqvalidator-plugin

frameworkVersion: '4'

provider:
 name: aws
 runtime: nodejs18.x
 stage: ${opt:stage, 'dev'}
 region: ${opt:region, 'ap-southeast-1'}
 tracing:
   lambda: true 
   apiGateway: true
 environment:
   AUTH0_DOMAIN: dev-vljpb1rtqxikqtn8.us.auth0.com
   TODOS_TABLE: Todos-${self:provider.stage}
   TODOS_CREATED_AT_INDEX: CreatedAtIndex
   TODOS_S3_BUCKET: udacity-bucket-s3-${self:provider.stage}-${aws:accountId}
   AWS_XRAY_SDK_ENABLED: true

functions:
 Auth:
   handler: src/lambda/auth/auth0Authorizer.handler
   iamRoleStatements:
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

 GetTodos:
   handler: src/lambda/http/getTodos.handler
   events:
     - http:
         method: get
         path: todos
         cors:
           origin: '*'
           headers:
             - Content-Type
             - X-Amz-Date
             - Authorization
             - X-Api-Key
             - X-Amz-Security-Token
             - X-Amz-User-Agent
             - Accept
           allowCredentials: true
         authorizer: Auth
   iamRoleStatementsInherit: true
   iamRoleStatements:
     - Effect: Allow
       Action:
         - dynamodb:Query
       Resource:
         - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}
         - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

 CreateTodo:
   handler: src/lambda/http/createTodo.handler
   events:
     - http:
         method: post
         path: todos
         cors:
           origin: '*'
           headers:
             - Content-Type
             - X-Amz-Date
             - Authorization
             - X-Api-Key
             - X-Amz-Security-Token
             - X-Amz-User-Agent
             - Accept
           allowCredentials: true
         authorizer: Auth
         reqValidatorName: RequestBodyValidator
   iamRoleStatementsInherit: true
   iamRoleStatements:
     - Effect: Allow
       Action:
         - dynamodb:PutItem
       Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

 UpdateTodo:
   handler: src/lambda/http/updateTodo.handler
   events:
     - http:
         method: patch
         path: todos/{todoId}
         cors:
           origin: '*'
           headers:
             - Content-Type
             - X-Amz-Date
             - Authorization
             - X-Api-Key
             - X-Amz-Security-Token
             - X-Amz-User-Agent
             - Accept
           allowCredentials: true
         authorizer: Auth
   iamRoleStatementsInherit: true
   iamRoleStatements:
     - Effect: Allow
       Action:
         - dynamodb:UpdateItem
       Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

 DeleteTodo:
   handler: src/lambda/http/deleteTodo.handler
   events:
     - http:
         method: delete
         path: todos/{todoId}
         cors:
           origin: '*'
           headers:
             - Content-Type
             - X-Amz-Date
             - Authorization
             - X-Api-Key
             - X-Amz-Security-Token
             - X-Amz-User-Agent
             - Accept
           allowCredentials: true
         authorizer: Auth
   iamRoleStatementsInherit: true
   iamRoleStatements:
     - Effect: Allow
       Action:
         - dynamodb:DeleteItem
       Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.TODOS_TABLE}
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

 GenerateUploadUrl:
   handler: src/lambda/http/generateUploadUrl.handler
   events:
     - http:
         method: post
         path: todos/{todoId}/attachment
         cors:
           origin: '*'
           headers:
             - Content-Type
             - X-Amz-Date
             - Authorization
             - X-Api-Key
             - X-Amz-Security-Token
             - X-Amz-User-Agent
             - Accept
           allowCredentials: true
         authorizer: Auth
   iamRoleStatementsInherit: true
   iamRoleStatements:
     - Effect: Allow
       Action:
         - s3:PutObject
         - s3:PutObjectAcl
         - s3:GetObject
       Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*
     - Effect: Allow
       Action:
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
       Resource: "*"

resources:
 Resources:
   GatewayResponseDefault4XX:
     Type: AWS::ApiGateway::GatewayResponse
     Properties:
       ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
         gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,PATCH,DELETE'"
       ResponseType: DEFAULT_4XX
       RestApiId:
         Ref: ApiGatewayRestApi

   RequestBodyValidator:
     Type: AWS::ApiGateway::RequestValidator
     Properties:
       Name: 'request-body-validator'
       RestApiId:
         Ref: ApiGatewayRestApi
       ValidateRequestBody: true
       ValidateRequestParameters: true

   TodosTable:
     Type: AWS::DynamoDB::Table
     Properties:
       AttributeDefinitions:
         - AttributeName: userId
           AttributeType: S
         - AttributeName: todoId
           AttributeType: S
         - AttributeName: createdAt
           AttributeType: S
       KeySchema:
         - AttributeName: userId
           KeyType: HASH
         - AttributeName: todoId
           KeyType: RANGE
       BillingMode: PAY_PER_REQUEST
       TableName: ${self:provider.environment.TODOS_TABLE}
       LocalSecondaryIndexes:
         - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
           KeySchema:
             - AttributeName: userId
               KeyType: HASH
             - AttributeName: createdAt
               KeyType: RANGE
           Projection:
             ProjectionType: ALL

   TodosBucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
       CorsConfiguration:
         CorsRules:
           - AllowedOrigins:
               - '*'
             AllowedHeaders:
               - '*'
             AllowedMethods:
               - GET
               - PUT
               - POST
               - DELETE
               - HEAD
             MaxAge: 3000
             ExposedHeaders:
               - ETag
       PublicAccessBlockConfiguration:
         BlockPublicAcls: false
         BlockPublicPolicy: false
         IgnorePublicAcls: false
         RestrictPublicBuckets: false